Huffman Tree Encoding


COMPILATION & EXECUTION - HUFFENCODE:
	Compile:
		> make
		
	Execute - type ONE of the following commmands to run program:
		> ./huffencode <inputFile> <outputFile>
	
	Clean - removes *.o *.hdr *.bin *.raw and huffencode test files:
		> make clean
	

	
COMPILATION & EXECUTION - TEST:
	Compile:
		> make test
		
	Execute:
		> ./test
		
	Clean - removes *.o *.hdr *.bin *.raw and huffencode test files:
		> make clean
	

	
COMMAND LINE ARGUMENTS:
	<huffencode>:
		name of executable file
	
	<inputFile>:
		prefix for input file name
			
	<outputFile>:
		prefix for output file names(3 output files are created)
		

		
FILES IN PROGRAM:
	Driver.cpp:
		main method of program which handles input and calls relevant methods in HuffmanTree.cpp file
	
	HuffmanTree.cpp:
		source file with
		
	HuffmanTree.h:
		header file with class & method declarations for HuffmanTree.cpp
		
	HuffmanNode.cpp:
		source file with
		
	HuffmanNode.h:
		header file with class & method declarations for HuffmanNode.cpp
		
	HuffmanTest.cpp:
		source file containing unit tests

	HuffmanTest.h:
		header file for HuffmanTest.cpp
	
	makefile:
		compiles source code



OUTPUT FILES GENERATED BY PROGRAM:
	<outputFile>.hdr:
		Line 1: Number of fields in the code table.
		Line 2+: Code table with characters and their corresponding encodings.
		
	<outputFile>.dat:
		Line 1: Compression ratio in the form [original size]:[compressed size].
		Line 2+: Bit string encoding of input data created using the code table.
		
	<outputFile>.bin:
		Compressed encoded bit string.
		

		
NOTES TO USER:
	> input file must be in the same directory as the source code
	> input and output files should not include file extensions in command line
	> additional methods are contained in HuffmanTree.cpp to print out the unordered map with letter frequencies and also to print the code table stored in a different unordered map
	> ensure that the input file has a .txt extension
	> Extra credit methods:
		> bit packing works correctly
		> bit unpacking only works on small files and on files containing one continuous line of data(without and whitespaces)
		> outcome of unpacking is displayed before the program terminates, i.e., successful/unsuccessful
